/*-----------------------------------------------------------------------------------*/
/*  Mixins
/*-----------------------------------------------------------------------------------*/


@mixin fluid-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: calc($responsive / ($responsive - $responsive + 1vw));
  $dimension: if(unit($responsive)=='vh', 'height', 'width');
  $min-breakpoint: calc($min / $responsive-unitless * 100);

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: calc($max / $responsive-unitless * 100);

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}



// pseudo element properties
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

// center element
@mixin push--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin placeholder($color, $opacity) {
  &::-webkit-input-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &::-moz-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &::-ms-input-placeholder {
    color: $color;
    opacity: $opacity;
  }

  &::-moz-placeholder {
    color: $color;
    opacity: $opacity;
  }
}


@mixin col($size) {
  flex: 0 0 $size;
  max-width: $size;
}


// Positioning elements
// https://w3bits.com/sass-mixins/ Point n4
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);

    @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
      #{$o}: nth($args, $i + 1);
    }
  }

  position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}


// Media queries
@mixin screen($size) {
  $desktop-xlg: "(min-width: 1800px)";
  $desktop-lg: "(min-width: 1400px)";
  $desktop: "(min-width: 1240px)";
  $tablet: "(min-width: 768px)";
  $mobile: "(min-width: 480px)";
  $mobile-xs: "(max-width: 400px)";

  @if $size==desktop-xlg {
    @media only screen and #{$desktop-xlg} {
      @content;
    }
  }

  @if $size==desktop-lg {
    @media only screen and #{$desktop-lg} {
      @content;
    }
  }

  @if $size==desktop {
    @media only screen and #{$desktop} {
      @content;
    }
  }

  @else if $size==tablet {
    @media #{$tablet} {
      @content;
    }
  }

  @else if $size==mobile {
    @media #{$mobile} {
      @content;
    }
  }

  @else if $size==mobile-xs {
    @media #{$mobile-xs} {
      @content;
    }
  }

  @else {
    @media #{$size} {
      @content;
    }
  }
}


//Adds font-size in rem & px
//Value passed should be the expected px size
@mixin font-size($sizeValue: 14) {
  font-size: $sizeValue + px; //fallback for old browsers
  font-size: (0.0625 * $sizeValue) + rem;

}

//Adds line-height in rem & px
//Value passed should be the expected px size
@mixin line-height($heightValue: 22) {
  line-height: $heightValue + px; //fallback for old browsers
  line-height: (0.0625 * $heightValue) + rem;
}

//Rhythm adds font-size and line-height in rem with a px fallback
//Value passed should be the expected px size
@mixin rhythm($sizeValue: 14, $heightValue: 22) {
  @include font-size($sizeValue);
  @include line-height($heightValue);
}


// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
  -moz-flex-flow: $flow;
  -ms-flex-flow: $flow;
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
  -moz-flex-grow: $grow;
  -ms-flex-grow: $grow;
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -moz-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
  -moz-justify-content: $justify;
  -ms-justify-content: $justify;
  justify-content: $justify;
  -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-align-content: $align;
  -moz-align-content: $align;
  -ms-align-content: $align;
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
  -moz-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
  -moz-align-self: $align;
  -ms-align-self: $align;
  align-self: $align;
}






// Animation mixin setup
// https://gist.github.com/brz0/02a9dd37587de9176a1dbdb81bb53cf4#file-sass-mixin-animations-scss
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @-moz-keyframes #{$animation-name} {
    @content;
  }

  @-ms-keyframes #{$animation-name} {
    @content;
  }

  @-o-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
}

// ($str) example : 'fade-out 5s 3'
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}
